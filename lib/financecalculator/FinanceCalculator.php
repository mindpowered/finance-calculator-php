<?php
/**
 * Generated by Haxe 4.1.1
 */

namespace financecalculator;

use \maglev\MagLevNumber;
use \maglev\MagLevString;
use \maglev\MagLevFunction;
use \php\Boot;
use \maglev\MagLevResult;
use \maglev\MagLev;
use \maglev\MagLevBoolean;
use \maglev\MagLevError;
use \maglev\MagLevArray;
use \maglev\MagLevObject;

class FinanceCalculator {
	/**
	 * @var FinCalc
	 */
	public $calc;
	/**
	 * @var MagLev
	 */
	public $maglev;

	/**
	 * @param MagLev $maglev
	 * 
	 * @return void
	 */
	public function __construct ($maglev) {
		#/src/financecalculator/FinanceCalculator.hx:13: characters 3-23
		$this->maglev = $maglev;
		#/src/financecalculator/FinanceCalculator.hx:14: characters 3-28
		$this->calc = new FinCalc();
		#/src/financecalculator/FinanceCalculator.hx:15: characters 3-22
		$this->registerMyMethods();
	}

	/**
	 * @return void
	 */
	public function registerMyMethods () {
		#/src/financecalculator/FinanceCalculator.hx:18: lines 18-69
		$_gthis = $this;
		#/src/financecalculator/FinanceCalculator.hx:19: characters 3-25
		$bus = $this->maglev;
		#/src/financecalculator/FinanceCalculator.hx:21: lines 21-30
		$this->maglev->register("FinanceCalculator.PresentValueOfFutureMoney", MagLevFunction::fromFunction(function ($args) use (&$bus) {
			#/src/financecalculator/FinanceCalculator.hx:22: characters 4-48
			$data = MagLevArray::create();
			#/src/financecalculator/FinanceCalculator.hx:23: characters 4-59
			$data->push(MagLevString::fromString("_not_implemented_"));
			#/src/financecalculator/FinanceCalculator.hx:24: characters 4-85
			$data->push(MagLevString::fromString("FinanceCalculator.PresentValueOfFutureMoney"));
			#/src/financecalculator/FinanceCalculator.hx:25: characters 4-59
			$data->push(MagLevString::fromString("financecalculator"));
			#/src/financecalculator/FinanceCalculator.hx:26: characters 4-48
			$bus->call("MindPowered.Telemetry.Send", $data);
			#/src/financecalculator/FinanceCalculator.hx:27: characters 4-241
			$err = MagLevError::create(-20000, "You are trying to use the 'FinanceCalculator.PresentValueOfFutureMoney' method but it's not quite done yet. Please email support@mindpowered.dev to find out when it will be done.", $data);
			#/src/financecalculator/FinanceCalculator.hx:28: characters 4-58
			$result = MagLevResult::fromError($err);
			#/src/financecalculator/FinanceCalculator.hx:29: characters 4-17
			return $result;
		}));
		#/src/financecalculator/FinanceCalculator.hx:32: lines 32-41
		$this->maglev->register("FinanceCalculator.PresentValueOfDeposits", MagLevFunction::fromFunction(function ($args) use (&$bus) {
			#/src/financecalculator/FinanceCalculator.hx:33: characters 4-48
			$data = MagLevArray::create();
			#/src/financecalculator/FinanceCalculator.hx:34: characters 4-59
			$data->push(MagLevString::fromString("_not_implemented_"));
			#/src/financecalculator/FinanceCalculator.hx:35: characters 4-82
			$data->push(MagLevString::fromString("FinanceCalculator.PresentValueOfDeposits"));
			#/src/financecalculator/FinanceCalculator.hx:36: characters 4-59
			$data->push(MagLevString::fromString("financecalculator"));
			#/src/financecalculator/FinanceCalculator.hx:37: characters 4-48
			$bus->call("MindPowered.Telemetry.Send", $data);
			#/src/financecalculator/FinanceCalculator.hx:38: characters 4-238
			$err = MagLevError::create(-20000, "You are trying to use the 'FinanceCalculator.PresentValueOfDeposits' method but it's not quite done yet. Please email support@mindpowered.dev to find out when it will be done.", $data);
			#/src/financecalculator/FinanceCalculator.hx:39: characters 4-58
			$result = MagLevResult::fromError($err);
			#/src/financecalculator/FinanceCalculator.hx:40: characters 4-17
			return $result;
		}));
		#/src/financecalculator/FinanceCalculator.hx:43: lines 43-56
		$this->maglev->register("FinanceCalculator.FutureValue", MagLevFunction::fromFunction(function ($args) use (&$_gthis) {
			#/src/financecalculator/FinanceCalculator.hx:44: characters 4-72
			$presentValue = (Boot::typedCast(Boot::getClass(MagLevNumber::class), $args->get(0)))->getFloat();
			#/src/financecalculator/FinanceCalculator.hx:45: characters 4-66
			$numPeriods = (Boot::typedCast(Boot::getClass(MagLevNumber::class), $args->get(1)))->getInt();
			#/src/financecalculator/FinanceCalculator.hx:46: characters 4-72
			$interestRate = (Boot::typedCast(Boot::getClass(MagLevNumber::class), $args->get(2)))->getFloat();
			#/src/financecalculator/FinanceCalculator.hx:47: characters 4-80
			$timesCompoundedPerPeriod = (Boot::typedCast(Boot::getClass(MagLevNumber::class), $args->get(3)))->getInt();
			#/src/financecalculator/FinanceCalculator.hx:48: characters 4-73
			$depositAmount = (Boot::typedCast(Boot::getClass(MagLevNumber::class), $args->get(4)))->getFloat();
			#/src/financecalculator/FinanceCalculator.hx:49: characters 4-77
			$depositAtBeginning = (Boot::typedCast(Boot::getClass(MagLevBoolean::class), $args->get(5)))->getBool();
			#/src/financecalculator/FinanceCalculator.hx:50: characters 4-136
			$ret = $_gthis->calc->futureValue($presentValue, $numPeriods, $interestRate, $timesCompoundedPerPeriod, $depositAmount, $depositAtBeginning);
			#/src/financecalculator/FinanceCalculator.hx:51: characters 4-39
			$resobj = MagLevObject::create();
			#/src/financecalculator/FinanceCalculator.hx:52: characters 4-70
			$resobj->set("futureValue", MagLevNumber::fromFloat($ret->futureValue));
			#/src/financecalculator/FinanceCalculator.hx:53: characters 4-74
			$resobj->set("totalInterest", MagLevNumber::fromFloat($ret->totalInterest));
			#/src/financecalculator/FinanceCalculator.hx:54: characters 4-62
			$result = MagLevResult::fromResult($resobj);
			#/src/financecalculator/FinanceCalculator.hx:55: characters 4-17
			return $result;
		}));
		#/src/financecalculator/FinanceCalculator.hx:58: lines 58-67
		$this->maglev->register("FinanceCalculator.NetPresentValue", MagLevFunction::fromFunction(function ($args) use (&$bus) {
			#/src/financecalculator/FinanceCalculator.hx:59: characters 4-48
			$data = MagLevArray::create();
			#/src/financecalculator/FinanceCalculator.hx:60: characters 4-59
			$data->push(MagLevString::fromString("_not_implemented_"));
			#/src/financecalculator/FinanceCalculator.hx:61: characters 4-75
			$data->push(MagLevString::fromString("FinanceCalculator.NetPresentValue"));
			#/src/financecalculator/FinanceCalculator.hx:62: characters 4-59
			$data->push(MagLevString::fromString("financecalculator"));
			#/src/financecalculator/FinanceCalculator.hx:63: characters 4-48
			$bus->call("MindPowered.Telemetry.Send", $data);
			#/src/financecalculator/FinanceCalculator.hx:64: characters 4-231
			$err = MagLevError::create(-20000, "You are trying to use the 'FinanceCalculator.NetPresentValue' method but it's not quite done yet. Please email support@mindpowered.dev to find out when it will be done.", $data);
			#/src/financecalculator/FinanceCalculator.hx:65: characters 4-58
			$result = MagLevResult::fromError($err);
			#/src/financecalculator/FinanceCalculator.hx:66: characters 4-17
			return $result;
		}));
	}
}

Boot::registerClass(FinanceCalculator::class, 'financecalculator.FinanceCalculator');
